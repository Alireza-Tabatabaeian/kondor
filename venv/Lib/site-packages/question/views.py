from rest_framework import views
from .models import Question, Course, Comprehensive
from rest_framework import status, response
from .serializers import QuestionSerializer, CourseSerializer, ComprehensiveSerializer


# Create your views here.

class QuestionDetails(views.APIView):

    @staticmethod
    def get_object(qid):
        try:
            return Question.objects.get(pk=qid)
        except Question.DoesNotExist:
            return response.Response(status=status.HTTP_404_NOT_FOUND)

    def get(self, request, qid):
        question = self.get_object(qid)
        serializer = QuestionSerializer(question)
        return response.Response(serializer, status.HTTP_200_OK)


class QuestionEndPoint(views.APIView):

    def post(self, request):
        serializer = QuestionSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return response.Response(serializer.data, status.HTTP_201_CREATED)
        else:
            return response.Response(status=status.HTTP_400_BAD_REQUEST)


class ComprehensiveEndPoint(views.APIView):

    def post(self, request):
        serializer = ComprehensiveSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return response.Response(serializer.data, status.HTTP_201_CREATED)
        else:
            return response.Response(status=status.HTTP_400_BAD_REQUEST)


class CourseEndPoint(views.APIView):

    def post(self, request):
        serializer = CourseSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return response.Response(serializer.data, status.HTTP_201_CREATED)
        else:
            return response.Response(status=status.HTTP_400_BAD_REQUEST)


class CourseDetails(views.APIView):

    @staticmethod
    def get_object(cid):
        try:
            return Course.objects.get(pk=cid)
        except Course.DoesNotExist:
            return response.Response(status=status.HTTP_404_NOT_FOUND)

    def get(self, request, cid):
        course = self.get_object(cid)
        serializer = CourseSerializer(course)
        return response.Response(serializer, status.HTTP_200_OK)


class ComprehensiveDetails(views.APIView):

    @staticmethod
    def get_object(cid):
        try:
            return Comprehensive.objects.get(pk=cid)
        except Comprehensive.DoesNotExist:
            return response.Response(status=status.HTTP_404_NOT_FOUND)

    def get(self, request, cid):
        comprehensive = self.get_object(cid)
        serializer = ComprehensiveSerializer(comprehensive)
        return response.Response(serializer, status.HTTP_200_OK)
